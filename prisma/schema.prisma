// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String
  companyName   String?
  address       String?
  country       String?
  tel           String?    @unique
  email         String     @unique
  emailVerified DateTime?
  image         String?
  SIRET         String?    @unique
  VATNumber     String?    @unique
  activityCode  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  customers     Customer[]
  Invoice       Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id               String    @id @default(cuid())
  logo             String?
  companyName      String
  address          String
  country          String    @default("France")
  contactName      String?
  contactFirstName String?
  tel              String?
  email            String
  emailVerifiedAt  DateTime?
  SIRET            String?
  VATNumber        String?
  webSite          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  projects         Project[]
  invoices         Invoice[]
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String
  invoiceStatus InvoiceStatus @default(pending)
  paymentMethod String
  totalAmount   Float
  clientId      String
  projectId     String
  userId        String
  invoiceDate   DateTime?
  dueDate       DateTime?
  hours         HourEntry[]
  client        Customer      @relation(fields: [clientId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  project       Project       @relation(fields: [projectId], references: [id])
  createdAt     DateTime      @default(now())
}

enum InvoiceStatus {
  pending
  paid
  overdue
}

model Project {
  id         String        @id @default(cuid())
  name       String
  customerId String
  customer   Customer      @relation(fields: [customerId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  hours      HourEntry[]
  status     ProjectStatus @default(in_progress)
  Invoice    Invoice[]
}

enum ProjectStatus {
  in_progress
  completed
}

model HourEntry {
  id        String          @id @default(cuid())
  projectId String
  project   Project         @relation(fields: [projectId], references: [id])
  date      DateTime
  reason    String
  duration  Int
  rate      Float
  status    HourEntryStatus @default(unbilled)
  createdAt DateTime        @default(now())
  updatedAt DateTime?       @updatedAt
  invoiceId String?
  invoice   Invoice?        @relation(fields: [invoiceId], references: [id])
}

enum HourEntryStatus {
  unbilled
  billed
}
